/******************************************************************************

Generated by data wrangler mark iv on {{gentime}}.

{{{copyright}}}

{{name}} v{{version}}

******************************************************************************/

var //Map of columns for which inserts are allowed
    insertableColumns = {
      {{#each insertColumns}}{{#if @index}},
      {{/if}}'{{pname}}': {
        name: '{{name}}', 
        required: {{#if required}}true{{else}}false{{/if}},
        type: '{{type}}'
      }{{/each}}
    },
    //Map of columns for which updates are allowed
    updatableColumns = {
      {{#each updateColumns}}{{#if @index}},
      {{/if}}'{{pname}}': {
        name: '{{name}}',
        required: {{#if required}}true{{else}}false{{/if}},
        type: '{{type}}'
      }{{/each}}
    },
    dbi = false
;
{{#if insertColumns}}

/* Clean and validate a dataset based on a reference object.
 * Also transforms from external column names to actual column names.
 * 
 * @data is the data to clean/validate
 * @fn is the function to call when done
 */
function cleanAndValidate(data, reference, bypass, fn) {
  var result = {},
      errors = []
  ;

  Object.keys(reference).forEach(function(key) {
    if (typeof data[key] !== 'undefined') {
      //TODO: perform validation here
      result[data[key].name] = data[key];
    } else if (reference[key].required) {
      errors.push(key + ' is a required field');
    }
  });

  if (errors) {
    bypass(errors);
  } else {
    fn(errors, result);   
  }
}
{{/if}}

/* Get the database connection
 * 
 * @fn is the function to call with the connection
 */
function con(bypasser, fn) {
  //if there's no connection, call bypasser with error = true
  if (bypasser && fn) {
    if (dbi === false || typeof dbi === 'undefined') {
      bypasser('no db connection');      
    } else {
      fn(dbi);      
    }
  }
} 

//Helper to handle callback
function createHandler(fn) {
  return function (err, result) {
    fn(err, result);
  }
}

///////////////////////////////////////////////////////////////////////////////

module.exports = {public: {}};

/* Set the DBI
 * 
 * @interface is the DBWrapper instance
 */
module.exports.setDBI = function (interface) {
  dbi = interface;
};

/* Get a single row from the {{name}} table
 *
 * @id is the PK of the row to get
 * @fn is the function to call with the result
 */
module.exports.public.getSingle = function (id, fn) {
  con(fn, function (connection) {
    connection.fetchRow(
      connection.getSelect()
        .from('{{name}}', ['*'])
        .where('{{pk}} = ?', id)      
      , createHandler(fn)
    );
  });
};

/* Get a set of rows from the {{name}} table
 *
 * @page is the page number to get
 * @pageSize is the number of rows desired for each page
 * @fn is the function to call with the result
 */
module.exports.public.getSet = function (page, pageSize, fn) {
  con(fn, function (connection) {
    connection.fetchAll(
      connection.getSelect()
        .from('{{name}}', ['*'])        
      , createHandler(fn)
    );
  });
};
{{#if insertColumns}}

/* Insert a row in the {{name}} table
 * 
 * @data is the data to insert in the form of an 
 *       object keyed on public column names where inserts are allowed
 * @fn is the callback to call after performing the insert
 *
 * Example data object:
 * {
{{#each insertColumns}}{{#if @index}},
{{/if}} *   {{pname}}: '<{{{ptype}}}>'{{/each}}
 * }
 */
module.exports.public.insert = function (data, fn) {  
  cleanAndValidate(data, insertableColumns, fn, function (err, data) {       
    con(fn, function (connection) {
      connect.insert('{{name}}', data, createHandler(fn));
    });
  });
};
{{/if}}
{{#if updateColumns}}

/* Update a row in the {{name}} table
 *
 * @id is the PK of the row to change
 * @data is the update data in the form of an 
 *       object keyed on public column names
 * @fn is the callback to call after performing the update
 *
 * Example data object:
 * {
{{#each updateColumns}}{{#if @index}},
{{/if}} *   {{pname}}: '<{{{ptype}}}>'{{/each}}
 * }
 */
module.exports.public.update = function (id, data, fn) {
  cleanAndValidate(data, updatableColumns, fn, function (err, data) {
    con(fn, function (connection) {
      connection.update('{{name}}', data, {
        '{{pk}}': id
      }, createHandler(fn));
    });
  });
};
{{/if}}

/* Delete a row in the {{name}} table
 *
 * @id is the PK of the row to delete
 * @fn is the callback to call after doing the delete
 */
module.exports.public.delete = function (id, fn) {
  con(fn, function (connection) {
    connection.delete('{{name}}', {
      '{{pk}}': id
    }, createHandler(fn));
  });
};
{{#if filterColumns}}

module.exports.public.filter = function () {

};
{{/if}}
{{#if searchColumns}}

module.exports.public.search = function () {

};
{{/if}}